import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject
from config import TOKEN
from reminder import schedule_reminder
from database import add_reminder
from database import get_user_reminders
from database import delete_reminder
from reminder import schedule_reminder
from database import get_future_reminders
from datetime import datetime
from database import init_db
from database import mark_done
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import get_done_reminders
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

router = Router()




def get_main_keyboard():
    kb = [
        [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫")],
        [KeyboardButton(text="‚úÖ –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)



@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üí°\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=get_main_keyboard()
    )

@router.message(lambda msg: msg.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
         InlineKeyboardButton(text="üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")]
    ])

    await message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith("lang_"))
async def handle_language_selection(callback: CallbackQuery):
        lang = callback.data.split("_")[1]

        if lang == "ru":
            text = (
                "üìò <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
                "üìù /add ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                "üìã /list ‚Äî –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n"
                "‚úÖ /history ‚Äî –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö\n"
                "üóë –£–¥–∞–ª–µ–Ω–∏–µ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∑–∞–¥–∞—á–µ–π\n"
                "‚è≥ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞: <i>–≤ 21:00 16.04</i>\n\n"
                "‚ÑπÔ∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É!"
            )
        else:
            text = (
                "üìò <b>–ë–æ—Ç—Ç—ã –ø–∞–π–¥–∞–ª–∞–Ω—É –Ω“±—Å“õ–∞—É–ª—ã“ì—ã:</b>\n\n"
                "üìù /add ‚Äî –ï—Å–∫–µ —Å–∞–ª—É “õ–æ—Å—É\n"
                "üìã /list ‚Äî –ë–µ–ª—Å–µ–Ω–¥—ñ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ\n"
                "‚úÖ /history ‚Äî –ê—è“õ—Ç–∞–ª“ì–∞–Ω–¥–∞—Ä —Ç–∞—Ä–∏—Ö—ã\n"
                "üóë –ñ–æ—é ‚Äî –¢–∞–ø—Å—ã—Ä–º–∞ –∞—Å—Ç—ã–Ω–¥–∞“ì—ã —Ç“Ø–π–º–µ–Ω—ñ –±–∞—Å\n"
                "‚è≥ –£–∞“õ—ã—Ç –ø–µ–Ω –∫“Ø–Ω–¥—ñ “õ–æ–ª–¥–∞–π–¥—ã: <i>–≤ 21:00 16.04</i>\n\n"
                "‚ÑπÔ∏è –¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã “õ–æ–ª–¥–∞–Ω–∞ –∞–ª–∞—Å—ã–∑!"
            )

        await callback.message.edit_text(text, reply_markup=None)
        await callback.answer()


@router.message(lambda msg: msg.text == "üìã –°–ø–∏—Å–æ–∫")
async def handle_list_button(message: Message):
    await list_command(message)

@router.message(lambda msg: msg.text == "‚úÖ –ò—Å—Ç–æ—Ä–∏—è")
async def handle_history_button(message: Message):
    await history_command(message)

from aiogram.fsm.context import FSMContext
from states import AddReminderState  # –µ—Å–ª–∏ –≤—ã–Ω–µ—Å –æ—Ç–¥–µ–ª—å–Ω–æ

@router.message(lambda msg: msg.text == "üìù –î–æ–±–∞–≤–∏—Ç—å")
async def handle_add_button(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –£—á—ë–±–∞", callback_data="cat_–£—á—ë–±–∞")],
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞", callback_data="cat_–†–∞–±–æ—Ç–∞")],
        [InlineKeyboardButton(text="üè† –î–æ–º", callback_data="cat_–î–æ–º")],
        [InlineKeyboardButton(text="üí™ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="cat_–ó–¥–æ—Ä–æ–≤—å–µ")]
    ])
    await message.answer("üè∑ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state(AddReminderState.choosing_category)


@router.callback_query(lambda c: c.data.startswith("cat_"))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(category=category)

    await callback.message.edit_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: <b>{category}</b>\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É:")
    await state.set_state(AddReminderState.waiting_for_text)
    await callback.answer()


@router.message(AddReminderState.waiting_for_text)
async def fsm_add_reminder(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        category = data.get("category")

        args = message.text
        if not args or " –≤ " not in args:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç –≤ 22:00 –∏–ª–∏ 22:00 17.04")
            return

        text, time_part = args.rsplit(" –≤ ", 1)
        text = text.strip()
        time_part = time_part.strip()

        repeat_type = None
        if "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" in time_part.lower():
            repeat_type = "daily"
            time_part = time_part.lower().replace("–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "").strip()

        elif "–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º" in time_part.lower():
            repeat_type = "monday"
            time_part = time_part.lower().replace("–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º", "").strip()

        now = datetime.now()
        try:
            time_str, date_str = time_part.split(" ")
            remind_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m %H:%M")
        except ValueError:
            try:
                remind_time = datetime.strptime(time_part, "%H:%M").time()
                remind_datetime = datetime.combine(now.date(), remind_time)
                if remind_datetime < now:
                    remind_datetime += timedelta(days=1)
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n–ü—Ä–∏–º–µ—Ä: 22:00 –∏–ª–∏ 22:00 17.04")
                return

        delay = (remind_datetime - now).total_seconds()


        voice_file_id = None
        if message.voice:
            voice_file_id = message.voice.file_id

        reminder_id = await add_reminder(
            message.chat.id,
            text,
            remind_datetime.isoformat(),
            repeat_type,
            category,
            voice_file_id
        )

        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n<b>{text}</b>\nüïí {remind_datetime.strftime('%H:%M %d.%m')}\nüè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
        )

        asyncio.create_task(schedule_reminder(message.bot, message.chat.id, text, int(delay), reminder_id=reminder_id))
        await state.clear()

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:", e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –£–±–µ–¥–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ.")
        await state.clear()





@router.callback_query(lambda c: c.data.startswith("done_"))
async def inline_done_callback(callback: CallbackQuery):
    reminder_id = int(callback.data.split("_")[1])
    await mark_done(reminder_id)
    await callback.message.edit_text("‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")







@router.message(Command("list"))
async def list_command(message: Message, command: CommandObject = None):
    category = None
    if command and command.args:
        category = command.args.strip().capitalize()

    reminders = await get_user_reminders(message.chat.id, category)

    if not reminders:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    for rid, content, when, cat, voice in reminders:
        time_str = datetime.fromisoformat(when).strftime("%d.%m %H:%M")

        category_info = f"\nüè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <i>{cat}</i>" if cat else ""
        voice_info = "\nüéô <i>–ì–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ</i>" if voice else ""

        text = f"üîπ <b>{content}</b>\nüïí <i>{time_str}</i>{category_info}{voice_info}"

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"done_{rid}")
        builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{rid}")

        await message.answer(text, reply_markup=builder.as_markup())

@router.message(Command("delete"))
async def delete_command(message: Message, command: CommandObject):
    args = command.args

    if not args:
        await message.answer("‚ùå –ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å. –ü—Ä–∏–º–µ—Ä: /delete 1")
        return

    if not args.strip().isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /delete 2")
        return

    reminder_id = int(args.strip())

    try:
        await delete_reminder(reminder_id)
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å ID {reminder_id} —É–¥–∞–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")


@router.message(Command("add"))
async def add_command(message: Message, command: CommandObject):
    try:
        args = command.args
        if not args or " –≤ " not in args:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /add –¢–µ–∫—Å—Ç –≤ 22:00 –∏–ª–∏ 22:00 17.04")
            return

        # --- –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ —á–∞—Å—Ç—å —Å –≤—Ä–µ–º–µ–Ω–µ–º
        text, time_part = args.rsplit(" –≤ ", 1)
        text = text.strip()
        time_part = time_part.strip()

        # --- –í—ã–¥–µ–ª–∏–º –ø–æ–≤—Ç–æ—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ —É–¥–∞–ª–∏–º –∏—Ö –∏–∑ time_part
        repeat_type = None

        if "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å" in time_part.lower():
            repeat_type = "daily"
            time_part = time_part.lower().replace("–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "").strip()

        elif "–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º" in time_part.lower():
            repeat_type = "monday"
            time_part = time_part.lower().replace("–ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º", "").strip()

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.now()

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ –≤—Ä–µ–º—è + –¥–∞—Ç–∞
            time_str, date_str = time_part.split(" ")
            remind_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m %H:%M")
        except ValueError:
            # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
            try:
                remind_time = datetime.strptime(time_part, "%H:%M").time()
                remind_datetime = datetime.combine(now.date(), remind_time)
                if remind_datetime < now:
                    remind_datetime += timedelta(days=1)
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n–ü—Ä–∏–º–µ—Ä: 22:00 –∏–ª–∏ 22:00 17.04")
                return

        delay = (remind_datetime - now).total_seconds()

        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è:–£—á—ë–±–∞"
        category = None
        if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è:" in text.lower():
            parts = text.rsplit("–∫–∞—Ç–µ–≥–æ—Ä–∏—è:", 1)
            text = parts[0].strip()
            category = parts[1].strip().capitalize()


        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
        reminder_id = await add_reminder(message.chat.id, text, remind_datetime.isoformat(), repeat_type, category)


        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{text}</b>\nüïí {remind_datetime.strftime('%H:%M %d.%m')}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        asyncio.create_task(schedule_reminder(message.bot, message.chat.id, text, int(delay), reminder_id=reminder_id))

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ add_command:", e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –£–±–µ–¥–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")



async def main():
    await init_db()  # ‚Üê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î

    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã
    reminders = await get_future_reminders()
    for reminder in reminders:
        reminder_id, user_id, text, remind_at = reminder
        remind_time = datetime.fromisoformat(remind_at)
        delay = (remind_time - datetime.now()).total_seconds()

        if delay > 0:
            print(f"‚è≥ –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {reminder_id} —á–µ—Ä–µ–∑ {int(delay)} —Å–µ–∫.")
            # –î–∞–∂–µ –µ—Å–ª–∏ delay < 0, –∑–∞–ø—É—Å–∫–∞–µ–º ‚Äî —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
            asyncio.create_task(schedule_reminder(bot, user_id, text, max(int(delay), 0), reminder_id=reminder_id))

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)



@router.message(Command("history"))
async def history_command(message: Message):
    reminders = await get_done_reminders(message.chat.id)

    if not reminders:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    text = "üìñ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for content, when in reminders:
        time_str = datetime.fromisoformat(when).strftime("%d.%m %H:%M")
        text += f"‚úÖ <b>{content}</b>\nüïí <i>{time_str}</i>\n\n"

    await message.answer(text)

@router.callback_query(lambda c: c.data.startswith("delete_"))
async def inline_delete_callback(callback: CallbackQuery):
    reminder_id = int(callback.data.split("_")[1])

    await delete_reminder(reminder_id)
    await callback.message.edit_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())


